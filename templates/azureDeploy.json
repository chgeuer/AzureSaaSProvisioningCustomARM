{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "configStoreName": {
      "type": "string"
    },
    "letsEncryptSettings": {
      "type": "object",
      "defaultValue": {
        "acceptTermsOfService": "true",
        "useStagingServer": "true",
        "emailAddress": "christian.geuer-pollmann@web.de",
        "domainName": "baldur.geuer-pollmann.de"
      }
    }
  },
  "variables": {
    "names": {
      "registryName": "[parameters('configStoreName')]"
    },
    "acr": {
      "repository": "helloworld-node", 
      "taskRunName": "myquickdockerbuildrun"
    },
    "imageName": "[concat(variables('acr').repository, ':', variables('acr').taskRunName)]",
    "letsEncryptSettings": "[parameters('letsEncryptSettings')]",
    "appSettings": [
      { "k": "ASPNETCORE_ENVIRONMENT", "v": "Development" },
      { "k": "ASPNETCORE_URLS", "v": "http://localhost:80;https://localhost:443" },
      { "k": "LettuceEncrypt:AcceptTermsOfService", "v": "[variables('letsEncryptSettings').acceptTermsOfService]" },
      { "k": "LettuceEncrypt:UseStagingServer", "v": "[variables('letsEncryptSettings').useStagingServer]" },
      { "k": "LettuceEncrypt:EmailAddress", "v": "[variables('letsEncryptSettings').emailAddress]" },
      { "k": "LettuceEncrypt:DomainNames:0", "v": "[variables('letsEncryptSettings').domainName]" },
      { "k": "LandingPage:BaseAddress", "v": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-vm-simple-windows" },
      { "k": "LandingPage:TemplateName", "v": "azuredeploy.json" },
      { "k": "LandingPage:UIDefinitionName", "v": "createUiDefinition.json" },
      { "k": "ApiKey", "v": "SuperSecrewt123.-" }
    ],
    "apiVersions": {
      "appConfiguration": "2020-07-01-preview",
      "containerRegistry": "2019-12-01-preview"
    }
  },
  "resources": [
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "[variables('apiVersions').appConfiguration]",
      "name": "[parameters('configStoreName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "standard"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "[variables('apiVersions').appConfiguration]",
      "dependsOn": [
        "[concat('Microsoft.AppConfiguration/configurationStores/', parameters('configStoreName'))]"
      ],
      "copy": {
        "name": "appSettings",
        "count": "[length(variables('appSettings'))]",
        "mode": "Parallel"
      },
      "name": "[concat(parameters('configStoreName'), '/', variables('appSettings')[copyIndex('appSettings')].k)]",
      "properties": {
        "value": "[variables('appSettings')[copyIndex('appSettings')].v]",
        "contentType": "text/plain"
      }
    },


    {
      "type": "Microsoft.ContainerRegistry/registries",
      "name": "[variables('names').registryName]",
      "apiVersion": "[variables('apiVersions').containerRegistry]",
      "location": "[resourceGroup().location]",
      "comments": "Container registry for storing docker images",
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[variables('names').registryName]"
      },
      "sku": { "name": "Standard", "tier": "Standard" },
      "properties": {
        "adminUserEnabled": false
      },
      "resources": [
        {
          "type": "taskRuns",
          "name": "[parameters('taskRunName')]",
          "location": "[resourceGroup().location]",
          "apiVersion": "[variables('apiVersions').containerRegistry]",
          "dependsOn": [
            "[variables('names').registryName]"
          ],
          "properties": {
            "runRequest": {
              "type": "DockerBuildRequest",
              "dockerFilePath": "LandingPage/Dockerfile",
              "imageNames": [
                "[variables('imageName')]"
              ],
              "sourceLocation": "https://github.com/chgeuer/AzureSaaSProvisioningCustomARM.git",
              "isPushEnabled": true,
              "platform": { "os": "linux", "architecture": "amd64" }
            }
          }
        }
      ]
    }
  ]
}